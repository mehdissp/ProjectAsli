

import React, { useState, useEffect } from 'react';
import { 
  FiPlus, 
  FiMoreVertical, 
  FiEdit2, 
  FiTrash2,
  FiClock,
  FiUser,
  FiColumns,
  FiX,
  FiSave,
  FiRefreshCw
} from 'react-icons/fi';
import ColumnManager from './ColumnManager';
import UserSearchSelect from './UserSearchSelect'
import { todoStatusService } from '../../../services/todoStatusService';
import { todoService } from '../../../services/todo';
import './TodoBoard.css';
//import { useParams } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import moment from 'moment-jalaali';




const TodoBoard = () => {
  const [columns, setColumns] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState('');
  //const [projectId, setProjectId] = useState(1); // €åÿß ÿßÿ≤ props ÿ®⁄Ø€åÿ±
  
  const [showColumnManager, setShowColumnManager] = useState(false);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [selectedColumn, setSelectedColumn] = useState(null);


  const [editingTask, setEditingTask] = useState(null);
const [showEditModal, setShowEditModal] = useState(false);

const [columnOrder, setColumnOrder] = useState([]); // ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ state ÿ®ÿ±ÿß€å ÿ™ÿ±ÿ™€åÿ®
  const location = useLocation();
  
  // ÿØÿ±€åÿßŸÅÿ™ projectId ÿßÿ≤ state
  const projectId = location.state?.projectId;
  const projectName=location.state?.name


    // state‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ ÿ®ÿ±ÿß€å ÿ™⁄Ø‚ÄåŸáÿß
  const [tags, setTags] = useState([]);
  const [selectedTags, setSelectedTags] = useState([]);
  const [tagsLoading, setTagsLoading] = useState(false);
  const [showTagDropdown, setShowTagDropdown] = useState(false);

  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    priority: 'medium',
    assignee: '',
    dueDate: '',
      assignee: '', // ÿß€åŸÜÿ¨ÿß ID ⁄©ÿßÿ±ÿ®ÿ± ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàÿØ
    tags: []
  });

// ÿ™ÿßÿ®ÿπ ÿ™ÿ®ÿØ€åŸÑ ÿ™ÿßÿ±€åÿÆ ÿ®Ÿá ÿ¥ŸÖÿ≥€å
const convertToJalaali = (dateString) => {
  if (!dateString) return 'ÿ™ÿπ€å€åŸÜ ŸÜÿ¥ÿØŸá';
  
  try {
    // ÿß⁄Øÿ± ÿ™ÿßÿ±€åÿÆ ÿßŸÜ⁄ØŸÑ€åÿ≥€å Ÿáÿ≥ÿ™
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      // ÿß⁄Øÿ± ÿ™ÿßÿ±€åÿÆ ÿ¥ŸÖÿ≥€å Ÿáÿ≥ÿ™ (ŸÖÿ´ŸÑ 1402/10/25)
      if (typeof dateString === 'string' && dateString.includes('/')) {
        return dateString;
      }
      return 'ÿ™ÿßÿ±€åÿÆ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±';
    }
    
    // ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá ÿ¥ŸÖÿ≥€å
    return moment(date).format('jYYYY/jMM/jDD');
  } catch (error) {
    console.error('Error converting date:', error);
    return 'ÿ™ÿßÿ±€åÿÆ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±';
  }
};

  const fetchTags = async () => {
    try {
      setTagsLoading(true);
      // ŸÅÿ±ÿ∂ ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ ÿß€åŸÜ ÿ™ÿßÿ®ÿπ ÿØÿ± todoStatusService ŸÖŸàÿ¨ŸàÿØ ÿßÿ≥ÿ™
      const response = await todoStatusService.getTags();
      console.log('Tags response:', response);
      setTags(response.data || response || []);
    } catch (error) {
      console.error('Error fetching tags:', error);
      // ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÜŸÖŸàŸÜŸá ÿ®ÿ±ÿß€å ŸÖŸàÿßŸÇÿπ ÿÆÿ∑ÿß
      setTags([
        { id: 1, name: 'ŸÅŸàÿ±€å', color: '#FF6B6B' },
        { id: 2, name: 'ŸÖŸáŸÖ', color: '#4ECDC4' },
        { id: 3, name: 'ÿ™Ÿàÿ≥ÿπŸá', color: '#45B7D1' },
        { id: 4, name: 'ÿ®ÿß⁄Ø', color: '#FFA500' },
        { id: 5, name: 'ÿ™ÿ≥ÿ™', color: '#96CEB4' }
      ]);
    } finally {
      setTagsLoading(false);
    }
  };

  // ÿØÿ±€åÿßŸÅÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß ÿßÿ≤ API
  const fetchColumns = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await todoStatusService.getTodoStatuses(projectId);

    const order = [];
      // ÿ™ÿ®ÿØ€åŸÑ response API ÿ®Ÿá ŸÅÿ±ŸÖÿ™ ÿØÿßÿÆŸÑ€å
      const columnsData = {};
    
      response.data.columns.forEach(status => {
        columnsData[status.id] = {
          id: status.id.toString(),
          title: status.title,
          color: status.color,
          orderNum:status.orderNum,
          tasks: status.tasks
        };
        console.log("ÿ≥ÿ™ŸàŸÜ")
          console.log(columnsData)
          order.push(status.id.toString());
        console.log( columnsData[status.id]);
      });
      
    //   setColumns(columnsData);
        order.sort((a, b) => columnsData[a].orderNum - columnsData[b].orderNum);
    
    setColumns(columnsData);
    setColumnOrder(order);
    } catch (err) {
    //   console.error('Error fetching columns:', err);
    //   setError('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß');
    //   // ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÜŸÖŸàŸÜŸá ÿ®ÿ±ÿß€å ÿ≠ÿßŸÑÿ™ ÿ¢ŸÅŸÑÿß€åŸÜ
    //   setColumns(getSampleColumns());
        console.error('Error fetching columns:', err);
    setError('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß');
    const sampleColumns = getSampleColumns();
    setColumns(sampleColumns);
    setColumnOrder(Object.keys(sampleColumns));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchColumns();
    
    fetchTags();
 
  }, [projectId], [showTaskModal]);

  // ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß ÿ®ÿß API
  const handleAddColumn = async (newColumnData) => {
    try {
      setError(null);
      const todoStatusData = {
        projectId: projectId,
        name: newColumnData.title,
        color: newColumnData.color
      };

      await todoStatusService.createTodoStatus(todoStatusData);
      
      // ÿ±ŸÅÿ±ÿ¥ ŸÑ€åÿ≥ÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß
      await fetchColumns();
      
    } catch (err) {
      console.error('Error adding column:', err);
      setError('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ≥ÿ™ŸàŸÜ ÿ¨ÿØ€åÿØ');
      throw err; // ÿ®ÿ±ÿß€å ŸÜŸÖÿß€åÿ¥ ÿÆÿ∑ÿß ÿØÿ± ColumnManager
    }
  };

  const handleEditColumn = async (columnId, updatedColumnData) => {
    try {
      setError(null);
      const todoStatusData = {
        projectId: projectId,
        name: updatedColumnData.title,
        color: updatedColumnData.color,
        orderNum:updatedColumnData.orderNum
      };
      console.log("update")
      console.log(todoStatusData)
      await todoStatusService.updateTodoStatus(columnId, todoStatusData);
      
      // ÿ¢ŸæÿØ€åÿ™ local state
      setColumns(prev => ({
        ...prev,
        [columnId]: {
          ...prev[columnId],
          title: updatedColumnData.title,
          color: updatedColumnData.color
        }
      }));
      
    } catch (err) {
      console.error('Error updating column:', err);
      setError('ÿÆÿ∑ÿß ÿØÿ± Ÿà€åÿ±ÿß€åÿ¥ ÿ≥ÿ™ŸàŸÜ');
      throw err;
    }
  };
  //******************************************** */
// ŸÖÿØ€åÿ±€åÿ™ ÿßŸÜÿ™ÿÆÿßÿ® ÿ™⁄Ø‚ÄåŸáÿß
const handleTagSelect = (tagId) => {
  setSelectedTags(prev => {
    if (prev.includes(tagId)) {
      // ÿ≠ÿ∞ŸÅ ÿ™⁄Ø ÿß⁄Øÿ± ŸÇÿ®ŸÑÿßŸã ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØŸá
      return prev.filter(id => id !== tagId);
    } else {
      // ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ÿ™⁄Ø
      return [...prev, tagId];
    }
  });
};

// ŸÖÿØ€åÿ±€åÿ™ ÿ≠ÿ∞ŸÅ ÿ™⁄Ø ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØŸá
const handleRemoveTag = (tagId, e) => {
  e.stopPropagation();
  setSelectedTags(prev => prev.filter(id => id !== tagId));
};

// ÿ®ÿ≥ÿ™ŸÜ ŸÖŸàÿØÿßŸÑ Ÿà ÿ±€åÿ≥ÿ™ ÿ™⁄Ø‚ÄåŸáÿß
const handleCloseTaskModal = () => {
  setShowTaskModal(false);
  setSelectedTags([]);
  setShowTagDropdown(false);
};
const handleCloseEditModal = () => {
  setShowEditModal(false);
  setEditingTask(null);
  setSelectedTags([]);
  setShowTagDropdown(false);
};
// ŸÖÿØ€åÿ±€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄© ÿ®ÿß ÿ™⁄Ø‚ÄåŸáÿß
// ŸÖÿØ€åÿ±€åÿ™ ÿ¢ŸæÿØ€åÿ™ ÿ™ÿ≥⁄©
const handleUpdateTask = async (e) => {
  e.preventDefault();
  if (!editingTask.title.trim()) {
    alert('ŸÑÿ∑ŸÅÿß ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
    return;
  }

  try {
    // ÿ™ÿ®ÿØ€åŸÑ ÿØÿßÿØŸá‚ÄåŸáÿß ÿ®Ÿá ŸÅÿ±ŸÖÿ™ API
    const priorityMap = {
      'low': 0,
      'medium': 1,
      'high': 2
    };

    const todoTagsDtos = selectedTags.map(tagId => {
      const tag = tags.find(t => t.id === tagId);
      return { id: tag.id, name: tag.name };
    });

    const updateData = {
      title: editingTask.title,
      description: editingTask.description,
      statusId: parseInt(editingTask.statusId),
      priority: priorityMap[editingTask.priority] || 1,
      dueDate: editingTask.dueDate,
      todoTagsDtos: todoTagsDtos,
      assigneeId: editingTask.assignee || null
    };

    console.log('üì§ Updating todo:', updateData);

    // ŸÅÿ±ÿßÿÆŸàÿßŸÜ€å API
    //await todoStatusService.updateTodo(editingTask.id, updateData);

    // ÿ±ŸÅÿ±ÿ¥ ÿØÿßÿØŸá‚ÄåŸáÿß
    await fetchColumns();

    // ÿ®ÿ≥ÿ™ŸÜ ŸÖŸàÿØÿßŸÑ
    setShowEditModal(false);
    setEditingTask(null);
    setSelectedTags([]);

    // ŸÜŸÖÿß€åÿ¥ Ÿæ€åÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™
    setSuccess('ÿ™ÿ≥⁄© ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ Ÿà€åÿ±ÿß€åÿ¥ ÿ¥ÿØ');
    setTimeout(() => setSuccess(''), 3000);

  } catch (error) {
    console.error('‚ùå Error updating task:', error);
    setError(error.response?.data?.message || 'ÿÆÿ∑ÿß ÿØÿ± Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄©');
  }
};
// ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÑ€å⁄© ÿ±Ÿà€å Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄©
// const handleEditTaskClick = async (taskId, columnId) => {
//   try {
//     // ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ÿ≥⁄© ÿßÿ≤ API
//     const response = await todoStatusService.getTodoById(taskId);
//     const task = response.data || response;
    
//     // ÿ™ÿ®ÿØ€åŸÑ priority ÿ®Ÿá ŸÅÿ±ŸÖÿ™ ÿØÿßÿÆŸÑ€å
//     const priorityMap = {
//       0: 'low',
//       1: 'medium', 
//       2: 'high'
//     };
    
//     // Ÿæÿ± ⁄©ÿ±ÿØŸÜ ŸÅÿ±ŸÖ Ÿà€åÿ±ÿß€åÿ¥
//     setEditingTask({
//       id: task.id,
//       title: task.title,
//       description: task.description,
//       priority: priorityMap[task.priority] || 'medium',
//       assignee: task.assigneeId || '',
//       dueDate: task.dueDate ? new Date(task.dueDate).toLocaleDateString('fa-IR') : '',
//       statusId: task.statusId.toString(),
//       tags: task.tags || []
//     });
    
//     setSelectedTags(task.tags.map(tag => tag.id));
//     setShowEditModal(true);
    
//   } catch (error) {
//     console.error('‚ùå Error fetching task for edit:', error);
//     setError('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ÿ≥⁄©');
//   }
// };

const handleEditTaskClick = (taskId, columnId) => {
  try {
    // Ÿæ€åÿØÿß ⁄©ÿ±ÿØŸÜ ÿ™ÿ≥⁄© ÿØÿ± ÿ™ŸÖÿßŸÖ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß (ÿß⁄Øÿ± ŸÖŸÖ⁄©ŸÜŸá ÿ≥ÿ™ŸàŸÜ ÿπŸàÿ∂ ÿ¥ÿØŸá ÿ®ÿßÿ¥Ÿá)
    let task = null;
    let foundColumnId = columnId;

    // ÿßŸàŸÑ ÿØÿ± ÿ≥ÿ™ŸàŸÜ ŸÅÿπŸÑ€å ÿ¨ÿ≥ÿ™ÿ¨Ÿà ⁄©ŸÜ
    task = columns[columnId]?.tasks.find(t => t.id.toString() === taskId.toString());
    
    // ÿß⁄Øÿ± Ÿæ€åÿØÿß ŸÜÿ¥ÿØÿå ÿØÿ± ÿ™ŸÖÿßŸÖ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß ÿ¨ÿ≥ÿ™ÿ¨Ÿà ⁄©ŸÜ
    if (!task) {
      for (const [colId, column] of Object.entries(columns)) {
        task = column.tasks.find(t => t.id.toString() === taskId.toString());
        if (task) {
          foundColumnId = colId;
          break;
        }
      }
    }

    if (!task) {
      throw new Error('ÿ™ÿ≥⁄© ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ');
    }

    console.log('üìù Editing task:', task.userIdTodo );

    // Ÿæÿ± ⁄©ÿ±ÿØŸÜ ŸÅÿ±ŸÖ
    setEditingTask({
      id: task.id,
      title: task.title,
      description: task.description,
      priority: task.priority,
      assignee: task.userIdTodo || task.userIdTodo || '',
      dueDate: task.dueDate,
      statusId: foundColumnId, // ÿ≥ÿ™ŸàŸÜ€å ⁄©Ÿá ÿ™ÿ≥⁄© ÿ™Ÿàÿ¥ Ÿæ€åÿØÿß ÿ¥ÿØ
      tags: task.tags || []
    });

    setSelectedTags(task.tags.map(tag => tag.id));
    setShowEditModal(true);

  } catch (error) {
    console.error('‚ùå Error in edit task:', error);
    setError(error.message || 'ÿÆÿ∑ÿß ÿØÿ± Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄©');
  }
};

// ŸÖÿØ€åÿ±€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄© ÿ®ÿß ÿ™⁄Ø‚ÄåŸáÿß

const handleCreateTask = async (e) => {
  e.preventDefault();
  if (!newTask.title.trim()) {
    alert('ŸÑÿ∑ŸÅÿß ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
    return;
  }

  try {
    // ÿ™ÿ®ÿØ€åŸÑ selectedTags ÿ®Ÿá ŸÅÿ±ŸÖÿ™ ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤ API
    const todoTagsDtos = selectedTags.map(tagId => {
      const tag = tags.find(t => t.id === tagId);
      return tag ? {
        id: tag.id,
        name: tag.name
      } : null;
    }).filter(Boolean);

    // ÿ™ÿ®ÿØ€åŸÑ priority ÿ®Ÿá ÿπÿØÿØ
    const getPriorityNumber = (priority) => {
      switch (priority) {
        case 'low': return 0;
        case 'medium': return 1;
        case 'high': return 2;
        default: return 1;
      }
    };

    // ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿØÿßÿØŸá ÿ®ÿ±ÿß€å API
    const todoData = {
      title: newTask.title,
      description: newTask.description || '',
      statusId: parseInt(selectedColumn),
      priority: getPriorityNumber(newTask.priority),
      dueDate: newTask.dueDate || new Date().toLocaleDateString('fa-IR'),
      todoTagsDtos: todoTagsDtos,
      userId: newTask.assignee || null // ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ assigneeId
    };

    // ÿß⁄Øÿ± assignee ÿÆÿßŸÑ€å ÿßÿ≥ÿ™ÿå ŸÅ€åŸÑÿØ ÿ±Ÿà ÿ≠ÿ∞ŸÅ ⁄©ŸÜ (ÿ®ÿ≥ÿ™⁄Ø€å ÿ®Ÿá API ÿØÿßÿ±Ÿá)
    if (!newTask.assignee) {
      delete todoData.assigneeId;
    }

    console.log('üì§ Sending to API:', todoData);

    // ŸÅÿ±ÿßÿÆŸàÿßŸÜ€å API
    await todoService.createTodo(todoData);

    // ÿ±ŸÅÿ±ÿ¥ ÿØÿßÿØŸá‚ÄåŸáÿß
    await fetchColumns();

    // ÿ®ÿ≥ÿ™ŸÜ ŸÖŸàÿØÿßŸÑ Ÿà ÿ±€åÿ≥ÿ™ ŸÅÿ±ŸÖ
    handleCloseTaskModal();
    setNewTask({
      title: '',
      description: '',
      priority: 'medium',
      assignee: '',
      dueDate: '',
      tags: []
    });
    setSelectedTags([]);

    // ŸÜŸÖÿß€åÿ¥ Ÿæ€åÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™
    setSuccess('ÿ™ÿ≥⁄© ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ');
    setTimeout(() => setSuccess(''), 3000);

  } catch (error) {
    console.error('‚ùå Error creating todo:', error);
    setError(error.response?.data?.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄©');
  }
};
  //********************************************* */

  const handleDeleteColumn = async (columnId) => {
    try {
      setError(null);
      
      if (Object.keys(columns).length <= 1) {
        throw new Error('ÿ≠ÿØÿßŸÇŸÑ €å⁄© ÿ≥ÿ™ŸàŸÜ ÿ®ÿß€åÿØ Ÿàÿ¨ŸàÿØ ÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥ÿØ');
      }

      await todoStatusService.deleteTodoStatus(columnId);
      
      // ÿ±ŸÅÿ±ÿ¥ ŸÑ€åÿ≥ÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß
      await fetchColumns();
      
    } catch (err) {
      console.error('Error deleting column:', err);
      setError(err.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ÿ≥ÿ™ŸàŸÜ');
      throw err;
    }
  };

  const handleReorderColumns = (newColumnOrder) => {
      setColumnOrder(newColumnOrder);
    // ÿß⁄Øÿ± API ÿ®ÿ±ÿß€å ŸÖÿ±ÿ™ÿ® ÿ≥ÿßÿ≤€å ÿØÿßÿ±€åŸÖÿå ÿß€åŸÜÿ¨ÿß call ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ
     console.log(" ÿß⁄Øÿ± API ÿ®ÿ±ÿß€å ŸÖÿ±ÿ™ÿ® ÿ≥ÿßÿ≤€å ÿØÿßÿ±€åŸÖÿå ÿß€åŸÜÿ¨ÿß call ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ")
    console.log(newColumnOrder)
    const reorderedColumns = {};
    newColumnOrder.forEach(columnId => {
      if (columns[columnId]) {
        reorderedColumns[columnId] = columns[columnId];
      }
    });
  const updatedColumns = { ...columns };
  newColumnOrder.forEach((columnId, index) => {
    if (updatedColumns[columnId]) {
      updatedColumns[columnId] = {
        ...updatedColumns[columnId],
        orderNum: index + 1
      };
    }
  });
  
  setColumns(updatedColumns);
    //   setColumnOrder(newColumnOrder);
  };

  // ŸÖÿØ€åÿ±€åÿ™ ÿ™ÿ≥⁄©‚ÄåŸáÿß
  const handleAddTaskClick = (columnId) => {
    setSelectedColumn(columnId);
    setNewTask({
      title: '',
      description: '',
      priority: 'medium',
      assignee: '',
      dueDate: '',
      tags: []
    });
    setShowTaskModal(true);
  };

 
  const handleDragStart = (e, taskId, columnId) => {
    console.log("draggggggggggggggggggg")
        console.log(taskId)
              console.log(columnId)
    e.dataTransfer.setData('taskId', taskId);
    e.dataTransfer.setData('fromColumn', columnId);
  };

  const handleDragOver = (e, columnId) => {
    e.preventDefault();
    e.currentTarget.classList.add('drag-over');
  };

  const handleDragLeave = (e) => {
    e.currentTarget.classList.remove('drag-over');
  };

  // const handleDrop =   (e, toColumnId) => {
  //   // console.log("miyad dargg",toColumnId)
  //   e.preventDefault();
  //   e.currentTarget.classList.remove('drag-over');
    
  //   const taskId = e.dataTransfer.getData('taskId');
  //   const fromColumnId = e.dataTransfer.getData('fromColumn');
  //   //  console.log("miyad dargg",fromColumnId)
  //   if (fromColumnId === toColumnId) return;

  //   setColumns(prev =>  {
  //     const fromColumn = prev[fromColumnId];
  //     const toColumn = prev[toColumnId];
      
  //     if (!fromColumn || !toColumn) return prev;
  //         console.log("miyad dargg",taskId,toColumnId)
  //     const task = fromColumn.tasks.find(t => t.id.toString() === taskId);

  //         await todoService.createTodo(todoData);
  //        console.log("miyad dargg",fromColumn.tasks)
         

  //     if (!task) return prev;

  //     return {
  //       ...prev,
  //       [fromColumnId]: {
  //         ...fromColumn,
  //         tasks: fromColumn.tasks.filter(t => t.id.toString()  !== taskId)
  //       },
  //       [toColumnId]: {
  //         ...toColumn,
  //         tasks: [...toColumn.tasks, task]
  //       }
  //     };
  //   });
  // };



  const handleDrop = async (e, toColumnId) => {
  e.preventDefault();
  e.currentTarget.classList.remove('drag-over');
  
  const taskId = e.dataTransfer.getData('taskId');
  const fromColumnId = e.dataTransfer.getData('fromColumn');
  
  if (fromColumnId === toColumnId) return;

  try {
    // ÿßŸàŸÑ API ÿ±Ÿà call ⁄©ŸÜ
    const todoData = {
      id:parseInt(taskId),
      statusId: parseInt(toColumnId),
      // ÿ≥ÿß€åÿ± ŸÅ€åŸÑÿØŸáÿß€å ŸÑÿßÿ≤ŸÖ
    };
    await todoService.updateStatusTodo(todoData); // €åÿß createTodo ÿ®ÿ≥ÿ™Ÿá ÿ®Ÿá ŸÖŸÜÿ∑ŸÇ ÿ¥ŸÖÿß
    
    // ÿ≥Ÿæÿ≥ state ÿ±Ÿà ÿ¢ŸæÿØ€åÿ™ ⁄©ŸÜ
    setColumns(prev => {
      const fromColumn = prev[fromColumnId];
      const toColumn = prev[toColumnId];
      
      if (!fromColumn || !toColumn) return prev;
      
      const task = fromColumn.tasks.find(t => t.id.toString() === taskId);
      if (!task) return prev;

      return {
        ...prev,
        [fromColumnId]: {
          ...fromColumn,
          tasks: fromColumn.tasks.filter(t => t.id.toString() !== taskId)
        },
        [toColumnId]: {
          ...toColumn,
          tasks: [...toColumn.tasks, task]
        }
      };
    });
    
  } catch (error) {
    console.error('‚ùå Error updating task status:', error);
    setError('ÿÆÿ∑ÿß ÿØÿ± ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿàÿ∂ÿπ€åÿ™ ÿ™ÿ≥⁄©');
  }
};
  const handleDeleteTask = async (columnId, taskId) => {
    if (window.confirm('ÿ¢€åÿß ÿßÿ≤ ÿ≠ÿ∞ŸÅ ÿß€åŸÜ ÿ™ÿ≥⁄© ÿßÿ∑ŸÖ€åŸÜÿßŸÜ ÿØÿßÿ±€åÿØÿü')) {
      try{
await  todoService.deleteTodo(taskId);
        setColumns(prev => ({
        ...prev,
        [columnId]: {
          ...prev[columnId],
          tasks: prev[columnId].tasks.filter(t => t.id !== taskId)
        }
      }));
      }
         catch (error) {
              console.error('‚ùå nemiad:');
    console.error('‚ùå Error creating todo:', error.response.data.data.message);
     setError(error.response?.data?.data?.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄©');
  }

    }
  };
  const handleAssigneeChange = (userId) => {
  setNewTask(prev => ({ ...prev, assignee: userId }));
};

  const getPriorityClass = (priority) => {
    switch (priority) {
      case 'high': return 'priority-high';
      case 'medium': return 'priority-medium';
      case 'low': return 'priority-low';
      default: return 'priority-medium';
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>ÿØÿ± ÿ≠ÿßŸÑ ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™...</p>
      </div>
    );
  }

  return (
    <div className="todo-board">
      {/* ŸáÿØÿ± */}
      <div className="board-header">
        <div className="header-content">
          <h1>   Ÿàÿ∏ÿß€åŸÅ   {projectName}</h1>
          <p>ŸÖÿØ€åÿ±€åÿ™ Ÿà Ÿæ€å⁄Ø€åÿ±€å Ÿàÿ∏ÿß€åŸÅ ÿ™€åŸÖ</p>
        </div>
        <div className="header-actions">
          {error && (
            <div className="error-banner">
              {error}
              <button onClick={() => setError(null)} className="btn-close-error">√ó</button>
            </div>
          )}
            {success && (
    <div className="success-banner">
      {success}
      <button onClick={() => setSuccess('')} className="btn-close-success">√ó</button>
    </div>
  )}
          <button 
            className="btn btn-secondary"
            onClick={fetchColumns}
            disabled={loading}
          >
            <FiRefreshCw className={loading ? 'spinning' : ''} />
            ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å
          </button>
          <button 
            className="btn btn-secondary"
            onClick={() => setShowColumnManager(true)}
          >
            <FiColumns />
            ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß ({Object.keys(columns).length})
          </button>
        </div>
      </div>

      {/* ÿ®ÿ±ÿØ Kanban */}
      <div className="kanban-board">
        {Object.values(columns)
          .sort((a, b) => a.orderNum - b.orderNum)
        .map(column => (
          <div
            key={column.id}
            className="kanban-column"
            onDragOver={(e) => handleDragOver(e, column.id)}
            onDragLeave={handleDragLeave}
            onDrop={(e) => handleDrop(e, column.id)}
          >
            {/* ŸáÿØÿ± ÿ≥ÿ™ŸàŸÜ */}
            <div className="column-header" style={{ borderColor: column.color }}>
              <div className="column-title">
                <span 
                  className="column-color-dot" 
                  style={{ backgroundColor: column.color }}
                ></span>
                <h3>{column.title}</h3>
                <span className="task-count">{column.tasks.length}</span>
              </div>
              <div className="column-actions">
                <button 
                  className="btn-add-task"
                  onClick={() => handleAddTaskClick(column.id)}
                  title="ÿßŸÅÿ≤ŸàÿØŸÜ ÿ™ÿ≥⁄©"
                >
                  <FiPlus />
                </button>
              </div>
            </div>

            {/* ŸÑ€åÿ≥ÿ™ ÿ™ÿ≥⁄©‚ÄåŸáÿß */}
            <div className="task-list">
              {column.tasks.map(task => (
                <div
                  key={task.id}
                  className="task-card"
                  draggable
                  onDragStart={(e) => handleDragStart(e, task.id, column.id)}
                >
                  <div className="task-header">
                    <div className="task-priority">
                      <div className={`priority-dot ${getPriorityClass(task.priority)}`}></div>
                      <span className="priority-text">
                        {task.priority === 'high' ? 'ÿ®ÿßŸÑÿß' : 
                         task.priority === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : 'Ÿæÿß€å€åŸÜ'}
                      </span>
                    </div>
                    <div className="task-actions">
                        <button 
    className="btn-icon btn-edit"
    onClick={() => handleEditTaskClick(task.id, column.id)}
    title="Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄©"
  >
    <FiEdit2 />
  </button>
                      <button 
                        className="btn-icon btn-delete"
                        onClick={() => handleDeleteTask(column.id, task.id)}
                        title="ÿ≠ÿ∞ŸÅ ÿ™ÿ≥⁄©"
                      >
                        <FiTrash2 />
                      </button>
                    </div>
                  </div>

                  <div className="task-content">
                    <h4 className="task-title">{task.title}</h4>
                    <p className="task-description">{task.description}</p>
                  </div>

                  {/* <div className="task-tags">
                    {task.tags.map((tag, index) => (
                      <span key={index} className="task-tag">
                        {tag}
                    
                      </span>
                    ))}

                    
                  </div> */}
                  <div className="task-tags">
  {task.tags.map((tag, index) => (
    <span 
      key={tag.id || index} 
      className="task-tag"
      style={{ 
        backgroundColor: `${tag.color}`, 
        // borderColor: tag.color,
        // color: tag.color
      }}
    >
      <span 
        className="tag-color-dot"
        style={{ backgroundColor: tag.color }}
      ></span>
      {tag.name} {/* ‚úÖ ÿß€åŸÜÿ¨ÿß ÿ®ÿß€åÿØ tag.name ÿ®ÿßÿ¥ÿØ ŸÜŸá tag */}
    </span>
  ))}
</div>

                  <div className="task-footer">
                    <div className="task-assignee">
                      <FiUser />
                      <span>{task.assignee}</span>
                    </div>
                    <div className="task-due-date">
                      <FiClock />
                       <span>{convertToJalaali(task.dueDate)}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {column.tasks.length === 0 && (
              <div className="empty-column">
                <p>ÿ™ÿ≥⁄©€å Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ</p>
                <span>ÿ®ÿ±ÿß€å ÿßŸÅÿ≤ŸàÿØŸÜ ÿ™ÿ≥⁄© ÿ¨ÿØ€åÿØ ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ</span>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* ŸÖŸàÿØÿßŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß */}
      <ColumnManager
        isOpen={showColumnManager}
        onClose={() => setShowColumnManager(false)}
        columns={columns}
          columnOrder={columnOrder} // ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ
        onAddColumn={handleAddColumn}
        onEditColumn={handleEditColumn}
        onDeleteColumn={handleDeleteColumn}
        onReorderColumns={handleReorderColumns}
        loading={loading}
      />
{/* ŸÖŸàÿØÿßŸÑ Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄© */}
{showEditModal && (
  <div className="modal-overlay task-modal-overlay" onClick={() => setShowEditModal(false)}>
    <div className="modal-content task-modal" onClick={(e) => e.stopPropagation()}>
      <div className="modal-header">
        <h2>Ÿà€åÿ±ÿß€åÿ¥ ÿ™ÿ≥⁄©</h2>
        <button className="close-btn" onClick={() => setShowEditModal(false)}>
          <FiX />
        </button>
      </div>

      <form onSubmit={handleUpdateTask}>
        <div className="form-group">
          <label>ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© *</label>
          <input
            type="text"
            value={editingTask?.title || ''}
            onChange={(e) => setEditingTask(prev => ({ ...prev, title: e.target.value }))}
            placeholder="ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ"
            required
            autoFocus
          />
        </div>

        <div className="form-group">
          <label>ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™</label>
          <textarea
            value={editingTask?.description || ''}
            onChange={(e) => setEditingTask(prev => ({ ...prev, description: e.target.value }))}
            placeholder="ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™ ÿ™ÿ≥⁄©"
            rows="3"
          />
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>ÿßŸàŸÑŸà€åÿ™</label>
            <select
              value={editingTask?.priority || 'medium'}
              onChange={(e) => setEditingTask(prev => ({ ...prev, priority: e.target.value }))}
            >
              <option value="low">Ÿæÿß€å€åŸÜ</option>
              <option value="medium">ŸÖÿ™Ÿàÿ≥ÿ∑</option>
              <option value="high">ÿ®ÿßŸÑÿß</option>
            </select>
          </div>

          <div className="form-group">
            <label>ÿ≥ÿ™ŸàŸÜ</label>
            <select
              value={editingTask?.statusId || ''}
              onChange={(e) => setEditingTask(prev => ({ ...prev, statusId: e.target.value }))}
            >
              {Object.values(columns).sort((a, b) => a.orderNum - b.orderNum).map(column => (
                <option key={column.id} value={column.id}>
                  {column.title}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>ŸÖÿ≥ÿ¶ŸàŸÑ</label>
            <UserSearchSelect
              value={editingTask?.assignee || ''}
              onChange={(userId) => setEditingTask(prev => ({ ...prev, assignee: userId }))}
              placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ŸÖÿ≥ÿ¶ŸàŸÑ"
            />
          </div>

          <div className="form-group">
            <label>ÿ™ÿßÿ±€åÿÆ ÿßŸÜÿ¨ÿßŸÖ</label>
            <input
              type="text"
              value={editingTask?.dueDate || ''}
              onChange={(e) => setEditingTask(prev => ({ ...prev, dueDate: e.target.value }))}
              placeholder="ŸÖÿ´ÿßŸÑ: 1402/10/25"
            />
          </div>
        </div>

        {/* ŸÖŸàŸÑÿ™€å ÿ≥ŸÑ⁄©ÿ™ ÿ™⁄Ø‚ÄåŸáÿß */}
        <div className="form-group">
          <label>ÿ™⁄Ø‚ÄåŸáÿß</label>
          <div className="tags-selector">
            <div 
              className="tags-input"
              onClick={() => setShowTagDropdown(!showTagDropdown)}
            >
              <div className="selected-tags">
                {selectedTags.map(tagId => {
                  const tag = tags.find(t => t.id === tagId);
                  return tag ? (
                    <span 
                      key={tag.id}
                      className="selected-tag"
                      style={{ backgroundColor: tag.color + '20', borderColor: tag.color }}
                      onClick={(e) => handleRemoveTag(tag.id, e)}
                    >
                      <span 
                        className="tag-color-dot"
                        style={{ backgroundColor: tag.color }}
                      ></span>
                      {tag.name}
                      <span className="remove-tag">√ó</span>
                    </span>
                  ) : null;
                })}
                {selectedTags.length === 0 && (
                  <span className="placeholder">ÿ™⁄Ø‚ÄåŸáÿß ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ...</span>
                )}
              </div>
              <span className="dropdown-arrow">‚ñº</span>
            </div>

            {showTagDropdown && (
              <div className="tags-dropdown">
                {tagsLoading ? (
                  <div className="tags-loading">ÿØÿ± ÿ≠ÿßŸÑ ÿØÿ±€åÿßŸÅÿ™ ÿ™⁄Ø‚ÄåŸáÿß...</div>
                ) : (
                  tags.map(tag => (
                    <div
                      key={tag.id}
                      className={`tag-option ${selectedTags.includes(tag.id) ? 'selected' : ''}`}
                      onClick={() => handleTagSelect(tag.id)}
                    >
                      <span 
                        className="tag-color-dot"
                        style={{ backgroundColor: tag.color }}
                      ></span>
                      <span className="tag-name">{tag.name}</span>
                      {selectedTags.includes(tag.id) && (
                        <span className="check-mark">‚úì</span>
                      )}
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        </div>

        <div className="form-actions">
          <button
            type="button"
            className="btn btn-secondary"
            onClick={() => {
              setShowEditModal(false);
              setEditingTask(null);
              setSelectedTags([]);
            }}
          >
            ÿßŸÜÿµÿ±ÿßŸÅ
          </button>
          <button
            type="submit"
            className="btn btn-primary"
          >
            <FiSave />
            ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™
          </button>
        </div>
      </form>
    </div>
  </div>
)}
      {/* ŸÖŸàÿØÿßŸÑ ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄© ÿ¨ÿØ€åÿØ */}
      {/* {showTaskModal && (
        <div className="modal-overlay task-modal-overlay" onClick={() => setShowTaskModal(false)}>
          <div className="modal-content task-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄© ÿ¨ÿØ€åÿØ</h2>
              <button className="close-btn" onClick={() => setShowTaskModal(false)}>
                <FiX />
              </button>
            </div>

            <form onSubmit={handleCreateTask}>
              <div className="form-group">
                <label>ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© *</label>
                <input
                  type="text"
                  value={newTask.title}
                  onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ"
                  required
                  autoFocus
                />
              </div>

              <div className="form-group">
                <label>ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™</label>
                <textarea
                  value={newTask.description}
                  onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™ ÿ™ÿ≥⁄©"
                  rows="3"
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>ÿßŸàŸÑŸà€åÿ™</label>
                  <select
                    value={newTask.priority}
                    onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value }))}
                  >
                    <option value="low">Ÿæÿß€å€åŸÜ</option>
                    <option value="medium">ŸÖÿ™Ÿàÿ≥ÿ∑</option>
                    <option value="high">ÿ®ÿßŸÑÿß</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>ŸÖÿ≥ÿ¶ŸàŸÑ</label>
                  <input
                    type="text"
                    value={newTask.assignee}
                    onChange={(e) => setNewTask(prev => ({ ...prev, assignee: e.target.value }))}
                    placeholder="ŸÜÿßŸÖ ŸÖÿ≥ÿ¶ŸàŸÑ"
                  />
                </div>
              </div>

              <div className="form-group">
                <label>ÿ™ÿßÿ±€åÿÆ ÿßŸÜÿ¨ÿßŸÖ</label>
                <input
                  type="text"
                  value={newTask.dueDate}
                  onChange={(e) => setNewTask(prev => ({ ...prev, dueDate: e.target.value }))}
                  placeholder="ŸÖÿ´ÿßŸÑ: 1402/10/25"
                />
              </div>

              <div className="form-actions">
                <button
                  type="button"
                  className="btn btn-secondary"
                  onClick={() => setShowTaskModal(false)}
                >
                  ÿßŸÜÿµÿ±ÿßŸÅ
                </button>
                <button
                  type="submit"
                  className="btn btn-primary"
                >
                  <FiSave />
                  ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄©
                </button>
              </div>
            </form>
          </div>
        </div>
      )} */}

      {showTaskModal && (
  <div className="modal-overlay task-modal-overlay" onClick={handleCloseTaskModal}>
    <div className="modal-content task-modal" onClick={(e) => e.stopPropagation()}>
      <div className="modal-header">
        <h2>ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄© ÿ¨ÿØ€åÿØ</h2>
        <button className="close-btn" onClick={handleCloseTaskModal}>
          <FiX />
        </button>
      </div>

      <form onSubmit={handleCreateTask}>
        <div className="form-group">
          <label>ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© *</label>
          <input
            type="text"
            value={newTask.title}
            onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
            placeholder="ÿπŸÜŸàÿßŸÜ ÿ™ÿ≥⁄© ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ"
            required
            autoFocus
          />
        </div>

        <div className="form-group">
          <label>ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™</label>
          <textarea
            value={newTask.description}
            onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
            placeholder="ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™ ÿ™ÿ≥⁄©"
            rows="3"
          />
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>ÿßŸàŸÑŸà€åÿ™</label>
            <select
              value={newTask.priority}
              onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value }))}
            >
              <option value="low">Ÿæÿß€å€åŸÜ</option>
              <option value="medium">ŸÖÿ™Ÿàÿ≥ÿ∑</option>
              <option value="high">ÿ®ÿßŸÑÿß</option>
            </select>
          </div>

 <div className="form-group">
  <label>ŸÖÿ≥ÿ¶ŸàŸÑ</label>
  <UserSearchSelect
    value={newTask.assignee}
    onChange={handleAssigneeChange}
    placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ŸÖÿ≥ÿ¶ŸàŸÑ"
  />
</div>
        </div>

        <div className="form-group">
          <label>ÿ™ÿßÿ±€åÿÆ ÿßŸÜÿ¨ÿßŸÖ</label>
          <input
            type="text"
            value={newTask.dueDate}
            onChange={(e) => setNewTask(prev => ({ ...prev, dueDate: e.target.value }))}
            placeholder="ŸÖÿ´ÿßŸÑ: 1402/10/25"
          />
        </div>

        {/* ŸÖŸàŸÑÿ™€å ÿ≥ŸÑ⁄©ÿ™ ÿ™⁄Ø‚ÄåŸáÿß */}
        <div className="form-group">
          <label>ÿ™⁄Ø‚ÄåŸáÿß</label>
          <div className="tags-selector">
            <div 
              className="tags-input"
              onClick={() => setShowTagDropdown(!showTagDropdown)}
            >
              <div className="selected-tags">
                {selectedTags.map(tagId => {
                  const tag = tags.find(t => t.id === tagId);
                  return tag ? (
                    <span 
                      key={tag.id}
                      className="selected-tag"
                      style={{ backgroundColor: tag.color + '20', borderColor: tag.color }}
                      onClick={(e) => handleRemoveTag(tag.id, e)}
                    >
                      <span 
                        className="tag-color-dot"
                        style={{ backgroundColor: tag.color }}
                      ></span>
                      {tag.name}
                      <span className="remove-tag">√ó</span>
                    </span>
                  ) : null;
                })}
                {selectedTags.length === 0 && (
                  <span className="placeholder">ÿ™⁄Ø‚ÄåŸáÿß ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ...</span>
                )}
              </div>
              <span className="dropdown-arrow">‚ñº</span>
            </div>

            {showTagDropdown && (
              <div className="tags-dropdown">
                {tagsLoading ? (
                  <div className="tags-loading">ÿØÿ± ÿ≠ÿßŸÑ ÿØÿ±€åÿßŸÅÿ™ ÿ™⁄Ø‚ÄåŸáÿß...</div>
                ) : (
                  tags.map(tag => (
                    <div
                      key={tag.id}
                      className={`tag-option ${selectedTags.includes(tag.id) ? 'selected' : ''}`}
                      onClick={() => handleTagSelect(tag.id)}
                    >
                      <span 
                        className="tag-color-dot"
                        style={{ backgroundColor: tag.color }}
                      ></span>
                      <span className="tag-name">{tag.name}</span>
                      {selectedTags.includes(tag.id) && (
                        <span className="check-mark">‚úì</span>
                      )}
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        </div>

        <div className="form-actions">
          <button
            type="button"
            className="btn btn-secondary"
            onClick={handleCloseTaskModal}
          >
            ÿßŸÜÿµÿ±ÿßŸÅ
          </button>
          <button
            type="submit"
            className="btn btn-primary"
          >
            <FiSave />
            ÿß€åÿ¨ÿßÿØ ÿ™ÿ≥⁄©
          </button>
        </div>
      </form>
    </div>
  </div>
)}
    </div>
  );
};

// ÿØÿßÿØŸá‚ÄåŸáÿß€å ŸÜŸÖŸàŸÜŸá ÿ®ÿ±ÿß€å ÿ≤ŸÖÿßŸÜ€å ⁄©Ÿá API ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™
const getSampleColumns = () => ({
  '1': {
    id: '1',
    title: 'ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ±',
    color: '#94a3b8',
    tasks: []
  },
  '2': {
    id: '2',
    title: 'ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ¨ÿßŸÖ',
    color: '#f59e0b',
    tasks: []
  },
  '3': {
    id: '3',
    title: 'ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØŸá',
    color: '#10b981',
    tasks: []
  }
});

export default TodoBoard;